#include <stdio.h>
#include <sys/mman.h> // This header is available only on UNIX-like systems (Linux, macOS, BSD). It provides memory mapping functions like mmap and munmap.

/**
 * allocation: allocates anonymous memory not backed by any file.
 * The memory is private to the process and readable/writable.
 */
void* allocation(size_t size){
    void* ptr = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
    if(ptr == MAP_FAILED){
        return NULL;
    }
    return ptr;
}

/**
 * deallocation: frees memory allocated with mmap.
 * Returns 1 on success, -1 on failure.
 */
int deallocation(void* ptr, size_t size){
    int ret = munmap(ptr, size);
    return (ret == -1) ? -1 : 1;
}

int main(int argc, char* argv[])
{
    // Allocate memory for an array of 10 integers
    int* data = allocation(sizeof(int) * 10);
    if(!data){
        perror("Allocation Error");
        return -1;
    }

    // Initialize and print the array
    for(int i = 0; i < 10; i++){
        data[i] = i;
        printf("Value of data[%d] is %d\n", i, data[i]);
    }

    // Free the allocated memory
    if(deallocation(data, sizeof(int) * 10) < 0){
        perror("Deallocation Error");
        return -1;
    }

    // Allocate memory for an array of 10 pointers to int (2D array)
    int** datas = allocation(sizeof(int*) * 10);
    if(!datas){
        perror("Allocation Error");
        return -1;
    }

    // Allocate memory for each row of the 2D array
    for(int i = 0; i < 10; i++){
        datas[i] = allocation(sizeof(int) * 10);
        if(!datas[i]){
            perror("Allocation Error");
            for(int j = 0; j < i; j++) {
                deallocation(datas[j], sizeof(int) * 10);
            }
            deallocation(datas, sizeof(int*) * 10);
            return -1;
        }
    }

    // Initialize and print the 2D array
    for(int i = 0; i < 10; i++) {
        for(int j = 0; j < 10; j++) {
            datas[i][j] = i * 10 + j;
            printf("%d ", datas[i][j]);
        }
        printf("\n");
    }

    // Free each row of the 2D array
    for(int i = 0; i < 10; i++) {
        if(deallocation(datas[i], sizeof(int) * 10) < 0){
            perror("Deallocation Error");
            return -1;
        }
    }

    // Free the array of pointers
    if(deallocation(datas, sizeof(int*) * 10) < 0){
        perror("Deallocation Error");
        return -1;
    }

    return 0;
}
